[
  {
    "objectID": "03-version-control.html",
    "href": "03-version-control.html",
    "title": "Version control",
    "section": "",
    "text": "One of the defining principles behind how this course teaches computing is that everything the instructor and the students produce should be reproducible – how you get a result is just as important as the result itself. Implicit in the idea of reproducibility is collaboration, the code you produce is documentation of the process and it is critical to share it (even if only with yourself in the future). One of the goals of this course is to teach students tools that make this documentation and collaboration as robust and painless as possible. This is best accomplished with a distributed version control system like Git\nThis course adopts a top down approach to teaching Git – students are required to use it for all assignments. These type of tools tend to suffer from delayed gratification as when they are first introduced students view them as a clunky addition to their workflow and it is not until weeks or even months later that they experience the value first hand.\nIf this section doesn’t convince you that you should be using Git and GitHub in your data science course, Alternative Setups describes how to leverage RStudio Cloud features for assignment dissemination, collection, and providing feedback. You can also use your own institution’s learning management system for this purpose as well.",
    "crumbs": [
      "Extras",
      "Version control"
    ]
  },
  {
    "objectID": "03-version-control.html#git",
    "href": "03-version-control.html#git",
    "title": "Version control",
    "section": "Git",
    "text": "Git\nLearning Git is a steep hill to climb, but with appropriate and user friendly tooling and careful pedagogy, being able to use core functionality of git for the purposes of version control in a data analysis context doesn’t have to be.\nThe learning curve for Git is unavoidable but I have found it best to focus on core functionality. Specifically, I teach a simple centralized git workflow which uses RStudio’s project based git GUI. Each new assignment starts with creating a new project from git (i.e. clone), the RStudio git GUI continuously displays git status and allows users to add, rm, commit, push, and pull. These happen to be the most commonly used git commands, and using only these students will be able to do most of what they need to do to work and collaborate on assignments and submit them.\nHowever it is not unusual for students to mangle their repositories such that the command line tools become necessary, and when this happens, the instruction team can help students get out of the rut.\nThe most complicated task students regularly encounter are merge conflicts, most of which are straight forward to resolve. Students often develop elaborate workflows to avoid these types of issues but they eventually come to understand the resolution process.\nIt is super important to encourage students to commit early and often to reduce the size of each change. Finally, in the early stages of learning git it is useful to engineer situations in which students encounter problems while they are in the classroom so that the professor and teaching assistants are present to troubleshoot and walk them through the process in person. A sample activity for resolving merge conflicts is provided in the course materials here.",
    "crumbs": [
      "Extras",
      "Version control"
    ]
  },
  {
    "objectID": "03-version-control.html#github",
    "href": "03-version-control.html#github",
    "title": "Version control",
    "section": "GitHub",
    "text": "GitHub\nThe use of GitHub also goes a long way to help students visualize and understand the git process which also aids in student buy-in. The web interface allows students to easily view diffs (file changes over time) in files they are collaborating on, keep track of commit histories, and search both the current state as well as the entire history of the code base. Within the classroom GitHub can be thought of as an advanced and flexible learning management system (compared to traditional tools like Blackboard or Sakai).\nAt its most basic, GitHub can be used as a central repository where students turn in their work and where the professor and teaching assistants then collect it and provide feedback. However using this ecosystem for only assignment submission ignores the most compelling features and advantages. In our classes students are expected to push their work in progress throughout the assignment period. This is not enforced explicitly, but rather through the design of the assignments. Most assignments are large scale and team based, meaning no one student can easily complete all the work on their own. In addition, the various tasks within the assignment are interdependent, meaning students are not able to divide up the work and complete each piece individually. This type of design strongly encourages the students to share their work in progress which they are able to do using GitHub. This is also useful to the instructor as it allows for opportunities for observation and feedback through the course of the assignment without forcing students to turn in “drafts”.\nAdditionally, GitHub’s organization and teams features are a natural fit for managing course related tasks. We have used a model where each class has a separate organization to which the students are invited at the beginning of the semester. Students have individual and team personas on GitHub, and are given write access to repos for assignments accordingly, depending on whether the assignment is to be completed individually or in teams.\nIn general, I have found that using one repository per team per assignment works best. This creates a LOT of repositories by the end of the semester, but that’s okay! In order to comply with Family Educational Rights and Privacy Act (FERPA) requirements all student repositories are kept private by default, which is possible at no cost thanks to GitHub’s generous academic discount policy.\nSetup and management for larger classes can be challenging due to the sheer number of components, however most actions can be scripted via the GitHub API which can dramatically reduce the course administrative workload. Two solutions to this problem are (1) GitHub Classroom and (2) ghclass. Use of ghclass, an R package for GitHub classroom tools is detailed below, and use of GitHub classroom is described in Alternative Setups.",
    "crumbs": [
      "Extras",
      "Version control"
    ]
  },
  {
    "objectID": "03-version-control.html#ghclass",
    "href": "03-version-control.html#ghclass",
    "title": "Version control",
    "section": "ghclass",
    "text": "ghclass\nThe ghclass package is designed to enable instructors to efficiently manage their courses on GitHub. It has a wide range of functionality for managing organizations, teams, repositories, and users on GitHub and helps automate most of the tedious and repetitive tasks around creating and distributing assignments.\nIf you would like to learn more about using ghclass to set up your course on GitHub, I strongly recommend reviewing the video and materials from the following 1.5 hr workshop: Teaching computing with Git and GitHub.",
    "crumbs": [
      "Extras",
      "Version control"
    ]
  },
  {
    "objectID": "03-version-control.html#learn-more",
    "href": "03-version-control.html#learn-more",
    "title": "Version control",
    "section": "Learn more",
    "text": "Learn more\nIf you would like to learn more about teaching with version control, I recommend the following paper.\n\nBeckman, M. D., Çetinkaya-Rundel, M., Horton, N. J., Rundel, C. W., Sullivan, A. J., & Tackett, M. (2020). Implementing version control with Git and GitHub as a learning objective in statistics and data science courses. doi.org/10.1080/10691898.2020.1848485\n\nIf you would like to learn more about using version control with R, I strongly recommend Happy Git with R.",
    "crumbs": [
      "Extras",
      "Version control"
    ]
  },
  {
    "objectID": "weekly-activities/projects/proj-03/proj03.html",
    "href": "weekly-activities/projects/proj-03/proj03.html",
    "title": "Project 3: a High Scores Class",
    "section": "",
    "text": "Created by AI Prompt: create a piece of art that echoes grading inside the classroom"
  },
  {
    "objectID": "weekly-activities/projects/proj-03/proj03.html#introduction",
    "href": "weekly-activities/projects/proj-03/proj03.html#introduction",
    "title": "Project 3: a High Scores Class",
    "section": "Introduction",
    "text": "Introduction\nYou will build a HighScores class that keeps track of the top-10 scores for a game. The class will store the scores from highest-to-lowest, and only store at most 10 scores. It will keep track of how many high scores are being stored. The class must store the scores in an array.\nThe methods that must be defined for the class are: addScore(int score), getScore(i), and getNumScores(), plus, of course, the default constructor."
  },
  {
    "objectID": "weekly-activities/projects/proj-03/proj03.html#step-0.-prepare",
    "href": "weekly-activities/projects/proj-03/proj03.html#step-0.-prepare",
    "title": "Project 3: a High Scores Class",
    "section": "Step 0. Prepare",
    "text": "Step 0. Prepare\n\nClick this link and then “Accept this assignment”.\nWait a few seconds and refresh the page. Refresh until the page says “You’re ready to go!”. The page has a link to a github repo.\nClick the link to see your new repo on github.com.\nClick the green Code button and copy the link it shows.\nIn a terminal,\n\ncd to the directory where you are putting all your CS112 assignments.\ntype git clone &lt;paste-the-contents-of-the-link-you-copied&gt;\n\ncd to the new directory containing your repo.\ntype code . to start up Visual Studio Code in that directory.\nInspect the code you got in the assignment.\nIn the terminal, type make tester\nThe code should compile and give you an executable called “tester”\nRun the program: type ./tester\nYou should get some basic output – or at least it should not crash."
  },
  {
    "objectID": "weekly-activities/projects/proj-03/proj03.html#step-1.-starting-slow",
    "href": "weekly-activities/projects/proj-03/proj03.html#step-1.-starting-slow",
    "title": "Project 3: a High Scores Class",
    "section": "Step 1. Starting slow…",
    "text": "Step 1. Starting slow…\n\nCreate a TEST_CASE that creates a HighScores object, and a SECTION(\"getNumScores\") that calls getNumScores() on that object, and then REQUIREs that the result is 0. Compile (make tester) and see errors.\nNow, in HighScores.h, create the HighScores class and in the class’s private: section, create an array of size 10 of integers called *myScores*. And, create a variable called *myNumScores* that stores how many scores are being stored.\nIn the constructor, initialize both variables. You will have to write a loop to initialize every entry of *myScores* to 0.\nCreate the getter getNumScores(). Then, compile and run: your test should now pass."
  },
  {
    "objectID": "weekly-activities/projects/proj-03/proj03.html#step-2.-adding-a-first-score",
    "href": "weekly-activities/projects/proj-03/proj03.html#step-2.-adding-a-first-score",
    "title": "Project 3: a High Scores Class",
    "section": "Step 2. Adding a first score",
    "text": "Step 2. Adding a first score\nIn tests.cpp, add another test in a SECTION(\"addScore\") to call addScore(30) and then getNumScores() and REQUIRE that the value is 1. Compile and see the errors. Fix them by doing the following:\nCreate the addScore(int aScore) method in the .h and .cpp files (the function returns void). Implement it by just adding the score to the array at index myNumScores. Then increment myNumScores. Now, your test should pass. (However, if we call addScore() multiple times, the scores may not be sorted properly. But we’ll deal with that later.)"
  },
  {
    "objectID": "weekly-activities/projects/proj-03/proj03.html#step-3.-adding-many-scores",
    "href": "weekly-activities/projects/proj-03/proj03.html#step-3.-adding-many-scores",
    "title": "Project 3: a High Scores Class",
    "section": "Step 3. Adding many scores",
    "text": "Step 3. Adding many scores\nIn tests.cpp, create a loop to add 10 more scores to your HighScores object; thus, there should be 11 calls to addScore() made. Then, REQUIRE that the number of scores being stored is 10 – the maximum the object should store. This test should fail because our code does not check for a full array.\nFix the problem by adding code to make sure you only ever store at most 10 scores. Add the code to addScore(): if the array is full – i.e., myNumScores == 10, just return – do not try to add the new score. (Note: this is not a correct solution, but for the time being, it is good enough.)\nAlso, at this time, implement the method getScore(i). The parameter is an index of the score to return. For example, if the array has the value 42 at index 7 and the code calls getScore(7), the value 42 should be returned. You should write multiple tests to make sure the results you get are correct.\nIf the user passes in an invalid index – i.e., an index that is &gt;= myNumScores, throw an invalid_argument exception. (include &lt;stdexcept&gt; and add the using namespace std; stuff). Use REQUIRES_THROWS_AS() to test if the exception is thrown. Look at tests.cpp in lab3 to see an example."
  },
  {
    "objectID": "weekly-activities/projects/proj-03/proj03.html#step-4.-keep-the-scores-sorted",
    "href": "weekly-activities/projects/proj-03/proj03.html#step-4.-keep-the-scores-sorted",
    "title": "Project 3: a High Scores Class",
    "section": "Step 4. Keep the scores sorted",
    "text": "Step 4. Keep the scores sorted\nNow, the fun part: when we insert a score into the array, we don’t want to just add it to the “end” of the array. Instead, we want to keep the array sorted from highest score to lowest. So it should be inserted into the array after all the scores that are higher than it and before all scores that are less than or equal to it. In order to do this, we’ll have to shift over any lower scores before inserting the new score into the array.\nFor example, suppose the array looks like this:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n100\n95\n93\n89\n87\n70\n49\n22\n19\n17\n\n\n\n\n\nand myNumScores = 10.\nIf the main code now calls addScore(77), the array should look like this:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n100\n95\n93\n89\n87\n77\n70\n49\n22\n19\n\n\n\n\n\nNotice that every number &lt;= 77 has been shifted up in the array, and the last number has been “lost”. Even though we have called addScore() 11 times, myNumScores is still 10.\nTo implement this, your code has to first iterate through the array and find the location where the new high score should be inserted – in this case, that location is index 5. Then, your code needs to copy values up in the array – starting at index 8, where the value 19 is in the example. You move the value at index 8 to index 9, then the value at index 7 to index 8, etc. Finally, the code needs to insert the new value into the place it should go. To summarize, the algorithm for addScore(score) is:\n\nfind the location to insert the new score – checking if the result is -1. If so, return;\nshift every other value up;\nadd the new score to the array at the found location.\nincrement the number of scores stored – but only if the array was not full before adding the new value.\n\n(When the array was full, then the lowest high score was “lost”.)\nTo implement this, you must create two private methods in the class:\n\n\n\n\n\n\n\n\nMethod name\nparameters\nreturn type\n\n\n\n\nfindLocationToInsert()\nint newScore\nint: the index of where to insert the newScore, or -1 if the score is not a new high score.\n\n\nshiftUp()\nint fromIndex\nvoid\n\n\n\n\n\n\n\n\n\nIMPORTANT!\n\n\n\nIf the new score is lower than all stored high scores, findLocationToInsert should return -1. Your code in addScore() should handle this situation, as shown in the algorithm above.\n\n\n\n\n\n\n\n\nNOTE 1\n\n\n\nAbout findLocationToInsert(): loop from 0 to 9 so that your code can discover if the newScore should go at the end of the array. This will work because we’ve initialized the array to all 0s and we assume all scores are &gt;= 0.\n\n\nAdd the prototypes to your .h file and add empty “skeleton” implementations in your .cpp file. Implement the algorithm above in your addScore() method. That implementation should be something like 7 lines of code.\nBefore you implement the code, change your tests in tests.cpp. Your tests will have to assume that when addScore() is called, the value is inserted into the correct place, thus keeping the array sorted. So, some of your tests that assumed a value would always be added at the end will have to be replaced/fixed.\n\n\n\n\n\n\nNOTE 2\n\n\n\nGetting these tests correct is crucial. I added a comment after most of my calls to addScore() to state what the array should be holding at that point. That helped me keep track of how the code should be behaving and what my tests should test for.\n\n\nNow, implement the two private methods. Both must use for loops.\n\n\n\n\n\n\nNOTE 3\n\n\n\nYou might find it really useful to create a function to print out the high scores in the object (check the Pair class example). Then, you can call that function from various places to see what the array really holds.\n\n\nOnce you get things working, take another look at your tests. Do you need to add more tests to cover every situation? If so, add them. You’ll be graded on how good your tests are."
  },
  {
    "objectID": "weekly-activities/projects/proj-03/proj03.html#submission",
    "href": "weekly-activities/projects/proj-03/proj03.html#submission",
    "title": "Project 3: a High Scores Class",
    "section": "Submission",
    "text": "Submission\nTake another look at the Grading Rubric below and make changes to maximize your score.\nCommit and Sync your code to your online repo.\n\n\n\n\n\n\nImportant\n\n\n\nVerify you have synced your code to github by going to your online repo webpage and looking to see that the files are correct.\nAlso, verify that the automated test passes. The test is the same as tests.cpp.\n\n\n\nGrading Rubric\nThis project is worth 22 pts:\n\n15 pts for correctness\n2 pt for perfect indentation and good variable names, function names, and comments (i.e., hospitable code). You should write a comment in your code only when the following block of code is not obvious to the trained reader. You should not write a comment for each line of code. Writing a comment above the non-obvious methods can be very useful.\n5 pts for sufficient test cases to prove that the code is correct.\n\nWays students have lost points in the past:\n\n-3: can’t make tester\n-2: Tests don’t pass\n-22: No submission"
  },
  {
    "objectID": "03-discussion.html",
    "href": "03-discussion.html",
    "title": "Discussion",
    "section": "",
    "text": "My recommended tool for course discussion is Piazza.\nI have, in the past, used Slack for course communication as well. Slack has the advantage of being real-life feeling as well as being the communication tool of choice for many data science teams. However it doesn’t work well for lasting class discussions as threading and searchability are poor. Additionally, the instructor does not have the option to edit student questions, which can be frustrating if they have not formatted their code appropriately. Similar tools like Discord and MS Teams have similar advantages when it comes to real-life discussions and similar disadvantages when it comes to threading and searchability.\nOther options are GitHub issues and GitHub Discussions, especially for courses using version control.",
    "crumbs": [
      "Extras",
      "Discussion"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to CS112 - Data Structures",
    "section": "",
    "text": "CS 112 uses the C++ programming language to introduce students to the elementary data structures (vectors, lists, stacks, queues, binary search trees, …), recursion, big-oh notation, and other intermediate-level programming topics.\nThis a permanently in construction website, so please let us know if you find any information missing or had some bad experience with the links and interface throughout the semester.\nHere you will find all information needed to do well during the course."
  },
  {
    "objectID": "index.html#student-learning-outcomes",
    "href": "index.html#student-learning-outcomes",
    "title": "Welcome to CS112 - Data Structures",
    "section": "Student Learning Outcomes",
    "text": "Student Learning Outcomes\nUpon successful completion of this course students will be able to:\n\nUse indirection (pointers) and run-time memory allocation to implement dynamic, generic container classes (e.g., vectors, lists, stacks, queues, trees, etc.).\n\nAnalyze, categorize, and compare the complexity of data structure operations using “big-oh” notation.\n\nDesign and implement recursive data structure operations.\n\nDesign, create, and use unit-tests to test the correctness of data structure operations.\n\nFor select algorithms, use simple parallel computing techniques to improve algorithm performance and measure the improvement."
  },
  {
    "objectID": "index.html#course-organization",
    "href": "index.html#course-organization",
    "title": "Welcome to CS112 - Data Structures",
    "section": "Course Organization",
    "text": "Course Organization\nThe course is organized around these components:\n\nThe lectures that will introduce data structures topics at the conceptual level;\nThe labs in which students will (in pairs) practice using and building data structures; and\nThe projects in which students will (individually) practice using and building data structures.\n\nEach week’s lectures, labs and projects will cover the same concepts, but will do so in different ways.\nThe first 4 weeks will be dedicated to learning C++. After that, we will begin studying data structures."
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Welcome to CS112 - Data Structures",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nThis website is built with Quarto, the lovely icons by icons8. The original code used to build this website can be found at DS Box. We are very grateful for their work!"
  },
  {
    "objectID": "content.html",
    "href": "content.html",
    "title": "Course content",
    "section": "",
    "text": "CS 112 is organized by week, with each week structured as follows:\nThe SLOs (Student Learning Objectives), labs, and projects for each week are given in the links on the left of this page. An overview of the semester is given in the table below:",
    "crumbs": [
      "Content",
      "Course content"
    ]
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Attribution-ShareAlike 4.0 International",
    "section": "",
    "text": "Creative Commons Corporation (“Creative Commons”) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an “as-is” basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible."
  },
  {
    "objectID": "LICENSE.html#creative-commons-attribution-sharealike-4.0-international-public-license",
    "href": "LICENSE.html#creative-commons-attribution-sharealike-4.0-international-public-license",
    "title": "Attribution-ShareAlike 4.0 International",
    "section": "Creative Commons Attribution-ShareAlike 4.0 International Public License",
    "text": "Creative Commons Attribution-ShareAlike 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\n\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nBY-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicense Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\n\n\nSection 2 – Scope.\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\n\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\n\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\nDownstream recipients.\nA. Offer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\n\n__Additional offer from the Licensor – Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter’s License You apply.\n\nC. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\n\n\nSection 3 – License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\n\n\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\n\n\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\n\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\nShareAlike.\n\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\n\nThe Adapter’s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License.\nYou must include the text of, or the URI or hyperlink to, the Adapter’s License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\nYou may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter’s License You apply.\n\n\n\nSection 4 – Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\n\n\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUnless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.\nTo the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\n\n\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\n\n\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.t stated herein are separate from and independent of the terms and conditions of this Public License.\n\n\n\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org"
  },
  {
    "objectID": "CODE_OF_CONDUCT.html",
    "href": "CODE_OF_CONDUCT.html",
    "title": "Contributor Covenant Code of Conduct",
    "section": "",
    "text": "We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#our-pledge",
    "href": "CODE_OF_CONDUCT.html#our-pledge",
    "title": "Contributor Covenant Code of Conduct",
    "section": "",
    "text": "We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#our-standards",
    "href": "CODE_OF_CONDUCT.html#our-standards",
    "title": "Contributor Covenant Code of Conduct",
    "section": "Our Standards",
    "text": "Our Standards\nExamples of behavior that contributes to a positive environment for our community include:\n\nDemonstrating empathy and kindness toward other people\nBeing respectful of differing opinions, viewpoints, and experiences\nGiving and gracefully accepting constructive feedback\nAccepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\nFocusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n\nThe use of sexualized language or imagery, and sexual attention or advances of any kind\nTrolling, insulting or derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others’ private information, such as a physical or email address, without their explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting"
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#enforcement-responsibilities",
    "href": "CODE_OF_CONDUCT.html#enforcement-responsibilities",
    "title": "Contributor Covenant Code of Conduct",
    "section": "Enforcement Responsibilities",
    "text": "Enforcement Responsibilities\nCommunity leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#scope",
    "href": "CODE_OF_CONDUCT.html#scope",
    "title": "Contributor Covenant Code of Conduct",
    "section": "Scope",
    "text": "Scope\nThis Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#enforcement",
    "href": "CODE_OF_CONDUCT.html#enforcement",
    "title": "Contributor Covenant Code of Conduct",
    "section": "Enforcement",
    "text": "Enforcement\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly.\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#enforcement-guidelines",
    "href": "CODE_OF_CONDUCT.html#enforcement-guidelines",
    "title": "Contributor Covenant Code of Conduct",
    "section": "Enforcement Guidelines",
    "text": "Enforcement Guidelines\nCommunity leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n\n1. Correction\nCommunity Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\nConsequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n\n\n2. Warning\nCommunity Impact: A violation through a single incident or series of actions.\nConsequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n\n\n3. Temporary Ban\nCommunity Impact: A serious violation of community standards, including sustained inappropriate behavior.\nConsequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n\n\n4. Permanent Ban\nCommunity Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\nConsequence: A permanent ban from any sort of public interaction within the community."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#attribution",
    "href": "CODE_OF_CONDUCT.html#attribution",
    "title": "Contributor Covenant Code of Conduct",
    "section": "Attribution",
    "text": "Attribution\nThis Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html.\nCommunity Impact Guidelines were inspired by Mozilla’s code of conduct enforcement ladder.\nFor answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https:// www.contributor-covenant.org/translations."
  },
  {
    "objectID": "extras.html",
    "href": "extras.html",
    "title": "Extras for the Course",
    "section": "",
    "text": "Here you will see extra documentation and material for the course.",
    "crumbs": [
      "Extras",
      "Extras for the Course"
    ]
  },
  {
    "objectID": "instructors.html",
    "href": "instructors.html",
    "title": "Instructors",
    "section": "",
    "text": "This course has as instructors: - Prof. Victor Norman - Prof. Eric Araújo",
    "crumbs": [
      "Course Policies",
      "Instructors"
    ]
  },
  {
    "objectID": "instructors.html#office-hours",
    "href": "instructors.html#office-hours",
    "title": "Instructors",
    "section": "Office Hours",
    "text": "Office Hours\n\nProf. Norman’s hours\nProf. Araújo’s hours",
    "crumbs": [
      "Course Policies",
      "Instructors"
    ]
  },
  {
    "objectID": "policies.html",
    "href": "policies.html",
    "title": "Course Policies",
    "section": "",
    "text": "Your grade in this course will be based on:\n\nDaily Quizzes: 5%\n\nThe lowest 3 quizzes will be dropped.\n\nLabs: 20%\nHomework projects: 25%\nTests (5, including the final test during the Exam time): 50%\n\nThe lowest test score will be dropped.",
    "crumbs": [
      "Course Policies"
    ]
  },
  {
    "objectID": "policies.html#grace-days",
    "href": "policies.html#grace-days",
    "title": "Course Policies",
    "section": "Grace Days",
    "text": "Grace Days\nYou have 8 Grace Days available to you during the semester. These grace days may be used to submit an assignment late without penalty. Grace Days Remaining will be seen in the GradeBook in Moodle.\nHere are some circumstances in which you might use grace days:\n\nYou are an athlete and you have a very busy week. Use a few grace days to catch up the next week.\nYou become ill (physically or mentally) and cannot do the work on time.\nYou need to go home for an emergency.\n\nHere is the procedure for using grace days:\n\nDO NOT email me to tell me you are going to use grace days. I don’t need to know this – there is no action I need to take if you tell me this.\nWhen your assignment grade comes back and you have lost points due to lateness, then use the Grade Appeal app to ask for the points to be restored and tell me how many grace days you want to use for that.",
    "crumbs": [
      "Course Policies"
    ]
  },
  {
    "objectID": "policies.html#extenuating-circumstances",
    "href": "policies.html#extenuating-circumstances",
    "title": "Course Policies",
    "section": "Extenuating Circumstances",
    "text": "Extenuating Circumstances\nIf you fall ill (physically or mentally) for an extended period of time, AND you send me documentation from Student Life, Student Health Center, or the Center for Health and Wellness, then, and only then, I will consider allowing you to make up late assignments.\nIf you begin to skip class repeatedly due to mental health problems, go to the Center for Health and Wellness! Don’t delay!",
    "crumbs": [
      "Course Policies"
    ]
  },
  {
    "objectID": "policies.html#incompletes",
    "href": "policies.html#incompletes",
    "title": "Course Policies",
    "section": "Incompletes",
    "text": "Incompletes\nAn Incomplete (I) grade will be granted only in unusual circumstances, and only if those circumstances have been verified by the Student Life Office. Procrastination does not qualify as an unusual circumstance.\nNo work will be accepted after the last day of classes.",
    "crumbs": [
      "Course Policies"
    ]
  },
  {
    "objectID": "policies.html#classroom-policy",
    "href": "policies.html#classroom-policy",
    "title": "Course Policies",
    "section": "Classroom Policy",
    "text": "Classroom Policy\n\n\n\n\n\n\nIMPORTANT!\n\n\n\nNo phones, no laptops, unless we tell you you can.\n\n\nThis is a difficult class, and you don’t need to be distracted by goofing around on your phone or laptop. And, I don’t want you to distract others.\nDaily Quizzes will be administered in the first 5 minutes of class, on Moodle. Do not show up late to class.",
    "crumbs": [
      "Course Policies"
    ]
  },
  {
    "objectID": "policies.html#attendance",
    "href": "policies.html#attendance",
    "title": "Course Policies",
    "section": "Attendance",
    "text": "Attendance\nClass attendance is optional.\nAlso, lab attendance is required! Lab is not optional. Skipping lab may result in you doing poorly in class.\nMissing class due to illness: if you are going to miss class due to (physical or mental) illness, please send me an email before class.",
    "crumbs": [
      "Course Policies"
    ]
  },
  {
    "objectID": "policies.html#disabilities",
    "href": "policies.html#disabilities",
    "title": "Course Policies",
    "section": "Disabilities",
    "text": "Disabilities\nCalvin University is committed to providing access to all students. If you are a student with a documented disability, please notify a Disability Coordinator in Student Success (located in Hiemenga Hall 227) to discuss necessary accommodations. If you have an accommodation memo, please come talk to me in the first two weeks of class. If you are a student needing reasonable modifications for pregnancy and related conditions, please contact the Title IX Coordinator in Student Life (located in Spoelhof University Center 364).",
    "crumbs": [
      "Course Policies"
    ]
  },
  {
    "objectID": "policies.html#statement-of-diversity-and-inclusion",
    "href": "policies.html#statement-of-diversity-and-inclusion",
    "title": "Course Policies",
    "section": "Statement of Diversity and Inclusion",
    "text": "Statement of Diversity and Inclusion\nInside and outside of the classroom, I work to treat every person with equal respect, regardless of racial identity, gender identity, physicality, brain chemistry, nationality, political leanings, and religious background. Whoever you are, you are fearfully and wonderfully made. God delights in diversity and I do, too. We humans need diverse viewpoints because every viewpoint, on its own, has blind spots. That has been proven to be true in technology-related fields, where under-represented minorities are significantly under-represented in the working world. When companies work hard to rectify this, they find their products and services improve. We have found this to be true in Computer Science classrooms as well.\n\n\n\n\n\n\nIMPORTANT!\n\n\n\nIf you or someone else in this class is hurt by something I say or do in class, I would like to know about it so that we can work toward a remedy. This has happened in the past in my classroom – usually when I’m trying to be “cool” or be funny. If this happens this semester, please know that it was unintentional. Because this kind of feedback can be uncomfortable for all involved, I’ll take it however it comes: in public or in private, on the spot or days later, directly from you or indirectly through another student, another professor, or through my department chair Keith VanderLinden (kvlinden@calvin.edu).\n\n\n\n\n\n\n\n\nCallout by Prof. Norman!\n\n\n\nAlso, please note that I am half deaf (at least). I am completely deaf on my left side. This results in my not being able to hear students that speak quietly, and not being able to tell which direction sounds are coming from. Please speak loudly! Thanks.",
    "crumbs": [
      "Course Policies"
    ]
  },
  {
    "objectID": "weekly-activities/labs/lab-03/lab03.html",
    "href": "weekly-activities/labs/lab-03/lab03.html",
    "title": "Lab 3: Classes",
    "section": "",
    "text": "A student created by AI."
  },
  {
    "objectID": "weekly-activities/labs/lab-03/lab03.html#part-1-a-student-class",
    "href": "weekly-activities/labs/lab-03/lab03.html#part-1-a-student-class",
    "title": "Lab 3: Classes",
    "section": "Part 1: A Student Class",
    "text": "Part 1: A Student Class\n\nStep 0. Prepare\n\nClick this link and then “Accept this assignment”.\nWait a few seconds and refresh the page. Refresh until the page says “You’re ready to go!”. The page has a link to a github repo.\nClick the link to see your new repo on github.com.\nClick the green Code button and copy the SSH link it shows.\nIn a terminal,\n\ncd to the directory where you are putting all your CS112 assignments.\ntype git clone &lt;paste-the-contents-of-the-link-you-copied&gt;\n\ncd to the new directory containing your repo.\ntype code . to start up Visual Studio Code in that directory.\nEdit README.md, putting your and your partner’s names and email addresses in the file.\nInspect the code you got in the assignment.\n\n\n\nStep 1. Create the class\nWe will create a class to represent a Student. You probably have not created a class in C++ before, so here are the Pair.h and Pair.cpp classes I created as an example in class. Use this code as an example/template.\nThe instance variables for a Student will be:\n\n\n\n\n\n\n\n\n\nInstance Variable Name\nType\nDefault value\nNotes\n\n\n\n\nmyName\nstring\n“”\nImmutable (NOTE: this is not a const in our class, but we will not be making setter functions for these immutable values.)\n\n\nmyId\nunsigned int\n0\nImmutable (NOTE: this is not a const in our class, but we will not be making setter functions for these immutable values.)\n\n\nmyGpa\nfloat\n0.0\n\n\n\nmyMajor\nstring\n“Undecided”\n\n\n\n\nIn Student.h, you should see the definition of the Student class. In that class, create the private: section, and in there define the 4 instance variables, shown in the table above. You’ll have to #include &lt;string&gt; and do the using namespace business…\nCompile (type: make tester) and fix any errors. (You may see warnings – you can ignore those for now.)\nIn Student.h define the default constructor (in the public: section). In Student.cpp, create the default constructor implementation, initializing the instance variables to their default values, as shown in the table above.\n\n\n\n\n\n\nCompile and fix any errors.\n\n\n\n\n\n\n\n\nStep 2. Create getters\nIn your tests.cpp, you’ll find the first SECTION of unit tests called “student getters”, within the TEST_CASE “Student class”. Uncomment the first SECTION, so that the code to construct a Student object and then test getMajor() runs.\n\n\n\n\n\n\nCompile\n\n\n\nThe compilation should fail because we haven’t defined getMajor() yet. There should be no other problems.\n\n\nSo, create a getter function (in both the Student.h and Student.cpp files) called getMajor().\nCompile and run (in a terminal, run ./tester \"Student class\") – this should work now.\nNow, repeat the above steps for the other tests and instance variables (maybe make this part more clear in the future). Start with a test in tests.cpp first, then implement the prototype and code.\n\n\n\n\n\n\nNOTE\n\n\n\nDon’t delete any old tests – just keep adding more. Put each test in its own SECTION within the “Student class” TEST_CASE.\n\n\n\n\nStep 3. Create setters\nFor the instance variables that are mutable (see the table above), create setter methods. But first, for each, create a test. Put all of these tests in a new SECTION within the “Student class” TEST_CASE.\nExample: for the setGpa test, set the student’s gpa to 3.25, then in a REQUIRE statement, call getGpa() and make sure the value is 3.25.\n\n\nStep 4. Create an explicit-value constructor\nNow, create a second constructor – the explicit-value constructor. This constructor should take the two immutable fields as parameters, and store their values in the instance variables. Initialize all the other variables to their default values. BUT FIRST, create tests. I called my SECTION “student explicit-value constructor”, and in it I create a Student with the explicit-value constructor and then use the getters on all instance variables to make sure the object has the correct values in it.\n\n\n\n\n\n\nCompile and test the result. Fix any errors.\n\n\n\n\n\n\nYou are now done with this simple class. We could add tons of other functionality to it, but not now…\nBefore you go on, commit and push your changes to your github repo. You can easily do this from VSCode. After you do this, you should be able to see that the automated tests fail – but the one test that tests the “Student class” passes. If it does not pass, fix your code (or your tests), and resubmit until it does pass."
  },
  {
    "objectID": "weekly-activities/labs/lab-03/lab03.html#part-2-fraction-class",
    "href": "weekly-activities/labs/lab-03/lab03.html#part-2-fraction-class",
    "title": "Lab 3: Classes",
    "section": "Part 2: Fraction class",
    "text": "Part 2: Fraction class\nA Fraction class is a useful class to create. It stores a numerator and denominator and can do things like represent itself nicely (e.g., “3/4”), simplify itself, multiply itself with another fraction, etc.\n\nStep 1. Test the Fraction class\nWe’ll continue to use tests.cpp – don’t remove any code from there. But, now we’ll also use it to create and test Fraction class instances. However, our makefile does not compile the Fraction stuff yet.\nEdit the makefile, adding Fraction.cpp to the SOURCES line.\n\n\n\n\n\n\nNote\n\n\n\nSpace separated! Do not remove Students.cpp.\n\n\nIn tests.cpp, below all your tests for the Student class, add the tests shown below\n\n\n\n\n\n\nImportant!\n\n\n\nYou’ll have to #include \"Fraction.h\" at the top of the file.\n\n\nTEST_CASE(\"Fraction class\") {\n    SECTION(\"fraction constructors\") {\n        SECTION(\"default\") {\n            Fraction fr;\n            REQUIRE(fr.getNumerator() == 0);\n            REQUIRE(fr.getDenominator() == 1);\n        }\n        SECTION(\"explicit value\") {\n            Fraction fr(2, 4);\n            REQUIRE(fr.getNumerator() == 2);\n            REQUIRE(fr.getDenominator() == 4);\n        }\n    }\n}\n\n\nStep 2. Add the instance variables and constructors\nAdd the two instance variables – myNumerator and myDenominator (both integers) – to the class definition in the .h file.\nUpdate the default constructor, to initialize myNumerator to 0 and myDenominator to 1.\nNow, implement the explicit-value constructor, which takes both the numerator and denominator as parameters, and stores them in myNumerator and myDenominator. Don’t forget to put the declaration in the .h file and implementation in the .cpp file.\n\n\n\n\n\n\nNote\n\n\n\nWe will compile our tester after the next section.\n\n\n\n\nStep 3. getters\nAdd a new SECTION (within the “Fraction class” TEST_CASE) called “fraction getters” and SECTIONs to call the getter functions and test their results. Compilation should fail, as expected.\n\n\n\n\n\n\nNOTE\n\n\n\nYes, this is repetitive as we already used them for the default constructors. Just to make sure we cover all our bases, and this can easily be seen in our tests, make another SECTION to quickly check the getter functions again.\n\n\nNow, create getter functions for each.\nNow the compilation and execution should succeed with all tests passing.\n\n\n\n\n\n\nNOTE\n\n\n\nYou can run only some tests by putting the name of the test on the command line. E.g., you can run only the Fraction tests by running ./tester \"Fraction class\".\n\n\n\n\nStep 4. setters\nCreate tests to test setters.\nThen, create the methods and the code so it will compile and run successfully.\n\n\nStep 5. Fanciness\nNow, in setDenominator(), check if the parameter is 0 – an illegal value. If so, throw an invalid_argument exception (remember to #include &lt;stdexcept&gt; first). You can do this by using the line:\nthrow invalid_argument(\"Your error message here!\"); // (Change the error message please!)\nHere is a test for that, assuming you have a fraction called f1:\nSECTION(\"setDenominator\") {\n    REQUIRE_THROWS_AS(f1.setDenominator(0), invalid_argument);\n}\n\n\nStep 6. Display as a string\nCreate a test to call asString() on a Fraction object: If you create a new Fraction object newFrac and call newFrac.asString(), you can REQUIRE that the result should be “0/1”. Initially, this test will fail, so create the method, which returns a string.\n\n\n\n\n\n\nNote\n\n\n\nIn asString() you can use to_string(anInt) to convert an integer into a string. And, you can concatenate strings with +. to_string() is defined in  so you’ll have to #include that.\n\n\nWhen that works, use the setters to change the numerator and denominator for a fraction, and then write a test to ensure that asString() still produces the correct results."
  },
  {
    "objectID": "weekly-activities/labs/lab-03/lab03.html#submission",
    "href": "weekly-activities/labs/lab-03/lab03.html#submission",
    "title": "Lab 3: Classes",
    "section": "Submission",
    "text": "Submission\nCommit your changes to your github repo. After you do this, verify that the automated tests pass. The automated tests just run the tests.cpp file you have been editing.\nDon’t forget to look at the Grading Rubric at the top to make sure you get as many points as possible."
  },
  {
    "objectID": "weekly-activities/labs/lab-03/lab03.html#grading-rubric",
    "href": "weekly-activities/labs/lab-03/lab03.html#grading-rubric",
    "title": "Lab 3: Classes",
    "section": "Grading Rubric",
    "text": "Grading Rubric\nThis lab is worth 20 pts:\n\n10 points for each of Part 1 and Part the Second: 20 pts\n\n6 pts for correctness\n1 pt for perfect indentation and good variable names, function names, and comments (i.e., hospitable code). You should write a comment in your code only when the following block of code is not obvious to the trained reader. You should not write a comment for each line of code.\n3 pts for sufficient test cases to prove that the code is correct.\n\n\nWays students have lost points in the past:\n\n-2: Test doesn’t pass\n-1: Missing name and id\n-3: Missing steps, Next time speak to professor."
  },
  {
    "objectID": "weekly-activities/slides/lab03-slides.html#lab-3",
    "href": "weekly-activities/slides/lab03-slides.html#lab-3",
    "title": "Lab 03 — Classes",
    "section": "Lab 3",
    "text": "Lab 3\n\ncreating a Student class\npair programming (change your pairs!)"
  },
  {
    "objectID": "weekly-activities/slides/lab03-slides.html#dad-joke-of-the-week",
    "href": "weekly-activities/slides/lab03-slides.html#dad-joke-of-the-week",
    "title": "Lab 03 — Classes",
    "section": "Dad joke of the week",
    "text": "Dad joke of the week\n\n\nQ: Why did the functions stop calling each other?\nA: Because they had constant arguments."
  },
  {
    "objectID": "weekly-activities/week03.html",
    "href": "weekly-activities/week03.html",
    "title": "Week 3: Classes, Operator Overloading, etc.",
    "section": "",
    "text": "Students will be able to:\n\ndefine a class and implement it in .h and .cpp files, respectively.\nreason about the access modifiers public and private.\ndefine and implement constructors and destructors, and general methods.\ninstantiate objects statically\nimplement Test-driven development for a class.",
    "crumbs": [
      "Content",
      "Week 3: Classes, Operator Overloading, etc."
    ]
  },
  {
    "objectID": "weekly-activities/week03.html#slos-for-week-3",
    "href": "weekly-activities/week03.html#slos-for-week-3",
    "title": "Week 3: Classes, Operator Overloading, etc.",
    "section": "",
    "text": "Students will be able to:\n\ndefine a class and implement it in .h and .cpp files, respectively.\nreason about the access modifiers public and private.\ndefine and implement constructors and destructors, and general methods.\ninstantiate objects statically\nimplement Test-driven development for a class.",
    "crumbs": [
      "Content",
      "Week 3: Classes, Operator Overloading, etc."
    ]
  },
  {
    "objectID": "weekly-activities/week03.html#slides-videos-and-application-exercises",
    "href": "weekly-activities/week03.html#slides-videos-and-application-exercises",
    "title": "Week 3: Classes, Operator Overloading, etc.",
    "section": "Slides, videos, and application exercises",
    "text": "Slides, videos, and application exercises\n\nWeek 3: Slides\n\nSlides\n\n\nPair class code\n\n\n\nNo readings for Week 3.\n\n\n\n\n\n\nLab 3: Classes\nFitting and interpreting simple linear regression models\n\nInstructions\n\n\nSource\n\n\nSlides\n\n\n\n\nProject 3: Classes\nModel validation and inference\n\nInstructions\n\n\n\nStarter\n\n\n\nExam 1\nExam on Friday during class. Bring your laptop. Content: Weeks 0 - 2.",
    "crumbs": [
      "Content",
      "Week 3: Classes, Operator Overloading, etc."
    ]
  },
  {
    "objectID": "content.html#footnotes",
    "href": "content.html#footnotes",
    "title": "Course content",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nC++ for Python Programmers Book↩︎",
    "crumbs": [
      "Content",
      "Course content"
    ]
  },
  {
    "objectID": "weekly-activities/week04.html",
    "href": "weekly-activities/week04.html",
    "title": "Week 4: Vectors – dynamic arrays",
    "section": "",
    "text": "Students will be able to…\n\nrecognize a copy constructor and implement it.\nidentify the 3 situations in which a copy constructor is called\nreason about the difference between a shallow and deep copy of a data structure.\nuse the new operator to dynamically allocate memory and the delete and delete[] operators to free up the memory.\nexplain when C++ calls the destructor on an object.\nexplain when it is important to implement the destructor explicitly for a class.\nunderstand the implementation of a dynamic array data structure, including how it adapts its internal size to accommodate the number of values in the array.\nimplement operator overloading for a class.",
    "crumbs": [
      "Content",
      "Week 4: Vectors -- dynamic arrays"
    ]
  },
  {
    "objectID": "weekly-activities/week04.html#slos-for-week-4",
    "href": "weekly-activities/week04.html#slos-for-week-4",
    "title": "Week 4: Vectors – dynamic arrays",
    "section": "",
    "text": "Students will be able to…\n\nrecognize a copy constructor and implement it.\nidentify the 3 situations in which a copy constructor is called\nreason about the difference between a shallow and deep copy of a data structure.\nuse the new operator to dynamically allocate memory and the delete and delete[] operators to free up the memory.\nexplain when C++ calls the destructor on an object.\nexplain when it is important to implement the destructor explicitly for a class.\nunderstand the implementation of a dynamic array data structure, including how it adapts its internal size to accommodate the number of values in the array.\nimplement operator overloading for a class.",
    "crumbs": [
      "Content",
      "Week 4: Vectors -- dynamic arrays"
    ]
  },
  {
    "objectID": "weekly-activities/week04.html#slides-videos-and-application-exercises",
    "href": "weekly-activities/week04.html#slides-videos-and-application-exercises",
    "title": "Week 4: Vectors – dynamic arrays",
    "section": "Slides, videos, and application exercises",
    "text": "Slides, videos, and application exercises\n\nWeek 4: Slides\n\nSlides\n\n\n\nNo readings for Week 4.\n\n\n\n\n\n\nLab 4: Vectors\nVec – A First Dynamic Data Structure\n\nInstructions\n\n\nSource\n\n\nSlides\n\n\n\n\nProject 4: Classes\nModel validation and inference\n\nInstructions\n\n\n\nStarter\n\n\n\nExam 1\nExam on Friday during class. Bring your laptop. Content: Weeks 0 - 2.",
    "crumbs": [
      "Content",
      "Week 4: Vectors -- dynamic arrays"
    ]
  },
  {
    "objectID": "weekly-activities/labs/lab-04/lab04.html",
    "href": "weekly-activities/labs/lab-04/lab04.html",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "",
    "text": "In this exercise, you will:\n\nBuild a class that uses dynamic allocation/deallocation.\nUse pointer variables to access items in a dynamically-allocated array.\n\n\n\n\n\n\nAn array for a data structures assignment created by AI."
  },
  {
    "objectID": "weekly-activities/labs/lab-04/lab04.html#objectives",
    "href": "weekly-activities/labs/lab-04/lab04.html#objectives",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "",
    "text": "In this exercise, you will:\n\nBuild a class that uses dynamic allocation/deallocation.\nUse pointer variables to access items in a dynamically-allocated array.\n\n\n\n\n\n\nAn array for a data structures assignment created by AI."
  },
  {
    "objectID": "weekly-activities/labs/lab-04/lab04.html#part-1-a-student-class",
    "href": "weekly-activities/labs/lab-04/lab04.html#part-1-a-student-class",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Part 1: A Student Class",
    "text": "Part 1: A Student Class\n\nStep 0. Prepare\n\nClick this link and then “Accept this assignment”.\nWait a few seconds and refresh the page. Refresh until the page says “You’re ready to go!”. The page has a link to a github repo.\nClick the link to see your new repo on github.com.\nClick the green Code button and copy the SSH link it shows.\nIn a terminal,\n\ncd to the directory where you are putting all your CS112 assignments.\ntype git clone &lt;paste-the-contents-of-the-link-you-copied&gt;\n\ncd to the new directory containing your repo.\ntype code . to start up Visual Studio Code in that directory.\nEdit README.md, putting your and your partner’s names and email addresses in the file.\nInspect the code you got in the assignment.\n\n\n\nStep 1. Create the class\nWe will create a class to represent a Student. You probably have not created a class in C++ before, so here are the Pair.h and Pair.cpp classes I created as an example in class. Use this code as an example/template.\nThe instance variables for a Student will be:\n\n\n\n\n\n\n\n\n\nInstance Variable Name\nType\nDefault value\nNotes\n\n\n\n\nmyName\nstring\n“”\nImmutable (NOTE: this is not a const in our class, but we will not be making setter functions for these immutable values.)\n\n\nmyId\nunsigned int\n0\nImmutable (NOTE: this is not a const in our class, but we will not be making setter functions for these immutable values.)\n\n\nmyGpa\nfloat\n0.0\n\n\n\nmyMajor\nstring\n“Undecided”\n\n\n\n\nIn Student.h, you should see the definition of the Student class. In that class, create the private: section, and in there define the 4 instance variables, shown in the table above. You’ll have to #include &lt;string&gt; and do the using namespace business…\nCompile (type: make tester) and fix any errors. (You may see warnings – you can ignore those for now.)\nIn Student.h define the default constructor (in the public: section). In Student.cpp, create the default constructor implementation, initializing the instance variables to their default values, as shown in the table above.\n\n\n\n\n\n\nCompile and fix any errors.\n\n\n\n\n\n\n\n\nStep 2. Create getters\nIn your tests.cpp, you’ll find the first SECTION of unit tests called “student getters”, within the TEST_CASE “Student class”. Uncomment the first SECTION, so that the code to construct a Student object and then test getMajor() runs.\n\n\n\n\n\n\nCompile\n\n\n\nThe compilation should fail because we haven’t defined getMajor() yet. There should be no other problems.\n\n\nSo, create a getter function (in both the Student.h and Student.cpp files) called getMajor().\nCompile and run (in a terminal, run ./tester \"Student class\") – this should work now.\nNow, repeat the above steps for the other tests and instance variables (maybe make this part more clear in the future). Start with a test in tests.cpp first, then implement the prototype and code.\n\n\n\n\n\n\nNOTE\n\n\n\nDon’t delete any old tests – just keep adding more. Put each test in its own SECTION within the “Student class” TEST_CASE.\n\n\n\n\nStep 3. Create setters\nFor the instance variables that are mutable (see the table above), create setter methods. But first, for each, create a test. Put all of these tests in a new SECTION within the “Student class” TEST_CASE.\nExample: for the setGpa test, set the student’s gpa to 3.25, then in a REQUIRE statement, call getGpa() and make sure the value is 3.25.\n\n\nStep 4. Create an explicit-value constructor\nNow, create a second constructor – the explicit-value constructor. This constructor should take the two immutable fields as parameters, and store their values in the instance variables. Initialize all the other variables to their default values. BUT FIRST, create tests. I called my SECTION “student explicit-value constructor”, and in it I create a Student with the explicit-value constructor and then use the getters on all instance variables to make sure the object has the correct values in it.\n\n\n\n\n\n\nCompile and test the result. Fix any errors.\n\n\n\n\n\n\nYou are now done with this simple class. We could add tons of other functionality to it, but not now…\nBefore you go on, commit and push your changes to your github repo. You can easily do this from VSCode. After you do this, you should be able to see that the automated tests fail – but the one test that tests the “Student class” passes. If it does not pass, fix your code (or your tests), and resubmit until it does pass."
  },
  {
    "objectID": "weekly-activities/labs/lab-04/lab04.html#part-2-fraction-class",
    "href": "weekly-activities/labs/lab-04/lab04.html#part-2-fraction-class",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Part 2: Fraction class",
    "text": "Part 2: Fraction class\nA Fraction class is a useful class to create. It stores a numerator and denominator and can do things like represent itself nicely (e.g., “3/4”), simplify itself, multiply itself with another fraction, etc.\n\nStep 1. Test the Fraction class\nWe’ll continue to use tests.cpp – don’t remove any code from there. But, now we’ll also use it to create and test Fraction class instances. However, our makefile does not compile the Fraction stuff yet.\nEdit the makefile, adding Fraction.cpp to the SOURCES line.\n\n\n\n\n\n\nNote\n\n\n\nSpace separated! Do not remove Students.cpp.\n\n\nIn tests.cpp, below all your tests for the Student class, add the tests shown below\n\n\n\n\n\n\nImportant!\n\n\n\nYou’ll have to #include \"Fraction.h\" at the top of the file.\n\n\nTEST_CASE(\"Fraction class\") {\n    SECTION(\"fraction constructors\") {\n        SECTION(\"default\") {\n            Fraction fr;\n            REQUIRE(fr.getNumerator() == 0);\n            REQUIRE(fr.getDenominator() == 1);\n        }\n        SECTION(\"explicit value\") {\n            Fraction fr(2, 4);\n            REQUIRE(fr.getNumerator() == 2);\n            REQUIRE(fr.getDenominator() == 4);\n        }\n    }\n}\n\n\nStep 2. Add the instance variables and constructors\nAdd the two instance variables – myNumerator and myDenominator (both integers) – to the class definition in the .h file.\nUpdate the default constructor, to initialize myNumerator to 0 and myDenominator to 1.\nNow, implement the explicit-value constructor, which takes both the numerator and denominator as parameters, and stores them in myNumerator and myDenominator. Don’t forget to put the declaration in the .h file and implementation in the .cpp file.\n\n\n\n\n\n\nNote\n\n\n\nWe will compile our tester after the next section.\n\n\n\n\nStep 3. getters\nAdd a new SECTION (within the “Fraction class” TEST_CASE) called “fraction getters” and SECTIONs to call the getter functions and test their results. Compilation should fail, as expected.\n\n\n\n\n\n\nNOTE\n\n\n\nYes, this is repetitive as we already used them for the default constructors. Just to make sure we cover all our bases, and this can easily be seen in our tests, make another SECTION to quickly check the getter functions again.\n\n\nNow, create getter functions for each.\nNow the compilation and execution should succeed with all tests passing.\n\n\n\n\n\n\nNOTE\n\n\n\nYou can run only some tests by putting the name of the test on the command line. E.g., you can run only the Fraction tests by running ./tester \"Fraction class\".\n\n\n\n\nStep 4. setters\nCreate tests to test setters.\nThen, create the methods and the code so it will compile and run successfully.\n\n\nStep 5. Fanciness\nNow, in setDenominator(), check if the parameter is 0 – an illegal value. If so, throw an invalid_argument exception (remember to #include &lt;stdexcept&gt; first). You can do this by using the line:\nthrow invalid_argument(\"Your error message here!\"); // (Change the error message please!)\nHere is a test for that, assuming you have a fraction called f1:\nSECTION(\"setDenominator\") {\n    REQUIRE_THROWS_AS(f1.setDenominator(0), invalid_argument);\n}\n\n\nStep 6. Display as a string\nCreate a test to call asString() on a Fraction object: If you create a new Fraction object newFrac and call newFrac.asString(), you can REQUIRE that the result should be “0/1”. Initially, this test will fail, so create the method, which returns a string.\n\n\n\n\n\n\nNote\n\n\n\nIn asString() you can use to_string(anInt) to convert an integer into a string. And, you can concatenate strings with +. to_string() is defined in  so you’ll have to #include that.\n\n\nWhen that works, use the setters to change the numerator and denominator for a fraction, and then write a test to ensure that asString() still produces the correct results."
  },
  {
    "objectID": "weekly-activities/labs/lab-04/lab04.html#submission",
    "href": "weekly-activities/labs/lab-04/lab04.html#submission",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Submission",
    "text": "Submission\nCommit your changes to your github repo. After you do this, verify that the automated tests pass. The automated tests just run the tests.cpp file you have been editing.\nDon’t forget to look at the Grading Rubric at the top to make sure you get as many points as possible."
  },
  {
    "objectID": "weekly-activities/labs/lab-04/lab04.html#grading-rubric",
    "href": "weekly-activities/labs/lab-04/lab04.html#grading-rubric",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Grading Rubric",
    "text": "Grading Rubric\nThis lab is worth 20 pts:\n\n10 points for each of Part 1 and Part the Second: 20 pts\n\n6 pts for correctness\n1 pt for perfect indentation and good variable names, function names, and comments (i.e., hospitable code). You should write a comment in your code only when the following block of code is not obvious to the trained reader. You should not write a comment for each line of code.\n3 pts for sufficient test cases to prove that the code is correct.\n\n\nWays students have lost points in the past:\n\n-2: Test doesn’t pass\n-1: Missing name and id\n-3: Missing steps, Next time speak to professor."
  },
  {
    "objectID": "weekly-activities/labs/lab-04/lab04.html#introduction",
    "href": "weekly-activities/labs/lab-04/lab04.html#introduction",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Introduction",
    "text": "Introduction\nYou should know how to get the assignment. So, do it.\n\nDon’t forget to edit the README.md file and put both of your names and emails in the file.\nYou might also at this time Manage Access to the repo, so that both of you can access it.\n\nThe Vec class is a simpler version of the vector class template available in the C++ standard template library (STL). It will provide the basic functionality, without some of the more advanced “bells and whistles” of the STL version.\nThe class in Vec.h is a mere shell at this point. Filling in this shell is our task this week."
  },
  {
    "objectID": "weekly-activities/labs/lab-04/lab04.html#getting-started",
    "href": "weekly-activities/labs/lab-04/lab04.html#getting-started",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Getting Started",
    "text": "Getting Started\n\nOpen each file and take a moment to browse through them, to get a sense of what each one contains. Note that test.cpp contains tests for a variety of Vec operations.\n\nOur approach today will be to use the following steps to build each operation: - This exercise will provide you with a description of what the operation should do, and a stub for the method that provides that operation; - You will uncomment the call to the test for that operation in tests.cpp - You will complete the method by adding statements to the stub; and - You will compile and run the project. (do make tester && ./tester)\n\n\n\n\n\n\nCompile. debug and fix any errors.\n\n\n\nIf all is well, you can then proceed to the next operation; otherwise you will need to debug your operation to figure out why it is failing the test, recompile, and rerun the test, until it is passed.\n\n\n\nInstance Variables\nIf you look in Vec.h, you’ll see that we are (for now) using a typedef to define the identifier Item as a synonym for the type double. You’ll also see that the private: section of class Vec is currently empty. As a minimalist dynamic array, our Vec will need to “remember” two things: How many Items it is currently storing; and The Items it is currently storing. To let a Vec “remember” the first of these, add an instance variable named mySize of type unsigned: private: unsigned mySize; }; To let a Vec “remember” the second of these, add an instance variable named myArray capable of storing the address of an Item: private: unsigned mySize; Item * myArray; };\nWith these two variables, a Vec object can “remember” (i) how many items it is storing, and (ii) the address of a dynamically allocated array in which its items are stored.\n\n\n\n\n\n\nCompile\n\n\n\nThe compilation should fail because we haven’t defined getMajor() yet. There should be no other problems.\n\n\n\n\n\n\n\n\nNOTE\n\n\n\nDon’t delete any old tests – just keep adding more. Put each test in its own SECTION within the “Student class” TEST_CASE.\n\n\n\n\nStep 3. Create setters\nFor the instance variables that are mutable (see the table above), create setter methods. But first, for each, create a test. Put all of these tests in a new SECTION within the “Student class” TEST_CASE.\nExample: for the setGpa test, set the student’s gpa to 3.25, then in a REQUIRE statement, call getGpa() and make sure the value is 3.25.\n\n\nStep 4. Create an explicit-value constructor\nNow, create a second constructor – the explicit-value constructor. This constructor should take the two immutable fields as parameters, and store their values in the instance variables. Initialize all the other variables to their default values. BUT FIRST, create tests. I called my SECTION “student explicit-value constructor”, and in it I create a Student with the explicit-value constructor and then use the getters on all instance variables to make sure the object has the correct values in it.\n\n\n\n\n\n\nCompile and test the result. Fix any errors.\n\n\n\n\n\n\nYou are now done with this simple class. We could add tons of other functionality to it, but not now…\nBefore you go on, commit and push your changes to your github repo. You can easily do this from VSCode. After you do this, you should be able to see that the automated tests fail – but the one test that tests the “Student class” passes. If it does not pass, fix your code (or your tests), and resubmit until it does pass."
  },
  {
    "objectID": "weekly-activities/labs/lab-04/lab04.html#step-1getting-started",
    "href": "weekly-activities/labs/lab-04/lab04.html#step-1getting-started",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 1Getting Started",
    "text": "Step 1Getting Started\n\nOpen each file and take a moment to browse through them, to get a sense of what each one contains. Note that test.cpp contains tests for a variety of Vec operations.\n\nOur approach today will be to use the following steps to build each operation: - This exercise will provide you with a description of what the operation should do, and a stub for the method that provides that operation; - You will uncomment the call to the test for that operation in tests.cpp - You will complete the method by adding statements to the stub; and - You will compile and run the project. (do make tester && ./tester)\n\n\n\n\n\n\nCompile. debug and fix any errors.\n\n\n\nIf all is well, you can then proceed to the next operation; otherwise you will need to debug your operation to figure out why it is failing the test, recompile, and rerun the test, until it is passed.\n\n\n\nInstance Variables\nIf you look in Vec.h, you’ll see that we are (for now) using a typedef to define the identifier Item as a synonym for the type double. You’ll also see that the private: section of class Vec is currently empty. As a minimalist dynamic array, our Vec will need to “remember” two things: How many Items it is currently storing; and The Items it is currently storing. To let a Vec “remember” the first of these, add an instance variable named mySize of type unsigned: private: unsigned mySize; }; To let a Vec “remember” the second of these, add an instance variable named myArray capable of storing the address of an Item: private: unsigned mySize; Item * myArray; };\nWith these two variables, a Vec object can “remember” (i) how many items it is storing, and (ii) the address of a dynamically allocated array in which its items are stored.\n\n\n\n\n\n\nCompile\n\n\n\nThe compilation should fail because we haven’t defined getMajor() yet. There should be no other problems.\n\n\n\n\n\n\n\n\nNOTE\n\n\n\nDon’t delete any old tests – just keep adding more. Put each test in its own SECTION within the “Student class” TEST_CASE.\n\n\n\n\nStep 3. Create setters\nFor the instance variables that are mutable (see the table above), create setter methods. But first, for each, create a test. Put all of these tests in a new SECTION within the “Student class” TEST_CASE.\nExample: for the setGpa test, set the student’s gpa to 3.25, then in a REQUIRE statement, call getGpa() and make sure the value is 3.25.\n\n\nStep 4. Create an explicit-value constructor\nNow, create a second constructor – the explicit-value constructor. This constructor should take the two immutable fields as parameters, and store their values in the instance variables. Initialize all the other variables to their default values. BUT FIRST, create tests. I called my SECTION “student explicit-value constructor”, and in it I create a Student with the explicit-value constructor and then use the getters on all instance variables to make sure the object has the correct values in it.\n\n\n\n\n\n\nCompile and test the result. Fix any errors.\n\n\n\n\n\n\nYou are now done with this simple class. We could add tons of other functionality to it, but not now…\nBefore you go on, commit and push your changes to your github repo. You can easily do this from VSCode. After you do this, you should be able to see that the automated tests fail – but the one test that tests the “Student class” passes. If it does not pass, fix your code (or your tests), and resubmit until it does pass."
  },
  {
    "objectID": "weekly-activities/labs/lab-04/lab04.html#step-1.-getting-started",
    "href": "weekly-activities/labs/lab-04/lab04.html#step-1.-getting-started",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 1. Getting Started",
    "text": "Step 1. Getting Started\n\nOpen each file and take a moment to browse through them, to get a sense of what each one contains. Note that test.cpp contains tests for a variety of Vec operations.\n\nOur approach today will be to use the following steps to build each operation: - This exercise will provide you with a description of what the operation should do, and a stub for the method that provides that operation; - You will uncomment the call to the test for that operation in tests.cpp - You will complete the method by adding statements to the stub; and - You will compile and run the project. (do make tester && ./tester)\n\n\n\n\n\n\nCompile. debug and fix any errors.\n\n\n\nIf all is well, you can then proceed to the next operation; otherwise you will need to debug your operation to figure out why it is failing the test, recompile, and rerun the test, until it is passed."
  },
  {
    "objectID": "weekly-activities/labs/lab-04/lab04.html#step-2.-instance-variables",
    "href": "weekly-activities/labs/lab-04/lab04.html#step-2.-instance-variables",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 2. Instance Variables",
    "text": "Step 2. Instance Variables\nIf you look in Vec.h, you’ll see that we are (for now) using a typedef to define the identifier Item as a synonym for the type double.\nYou’ll also see that the private: section of class Vec is currently empty. As a minimalist dynamic array, our Vec will need to “remember” two things:\n\nHow many Items it is currently storing; and\nThe Items it is currently storing.\n\nTo let a Vec “remember” the first of these, add an instance variable named mySize of type unsigned:\n  private:\n     unsigned mySize;\n  };\nTo let a Vec “remember” the second of these, add an instance variable named myArray capable of storing the address of an Item:\n  private:\n     unsigned mySize;\n     Item   *myArray;\n  };\nWith these two variables, a Vec object can “remember” (i) how many items it is storing, and (ii) the address of a dynamically allocated array in which its items are stored."
  },
  {
    "objectID": "weekly-activities/labs/lab-04/lab04.html#step-3.-the-default-constructor",
    "href": "weekly-activities/labs/lab-04/lab04.html#step-3.-the-default-constructor",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 3. The Default Constructor",
    "text": "Step 3. The Default Constructor\nThe role of the default constructor is to provide the instance variables with default values. In a data structure, these are usually values that are appropriate for an “empty” structure. In Vec.cpp, complete the default constructor for the class, so that it sets mySize to zero, and sets myArray to nullptr. Compile and run the project (make tester && ./tester).\nThe test should pass, but notice that it isn’t actually doing anything… To make a useful test, we need to see if mySize is 0 and myArray is nullptr. However, myArray and mySize are private, so the test cannot “reach into” the innards of the Vec object to check the values. To resolve this, we will create a getter for mySize. In the .h file, in the public: section, add the prototypes:\nunsigned getSize() const;\nIn the Vec.cpp file, add this code:\nunsigned Vec::getSize() const {\n}\nand finish the code which returns mySize.\nNotice that we are NOT going to add a getter method for myArray, which would allow a user of the Vec class to get the address where the values are being stored. We do not want to expose this internal detail to the user, as the user could abuse it and start putting values directly into memory. So, because we won’t make a getter for myArray, we won’t be able to make tests to check the value of myArray.\nUncomment the lines in the first (“default”) SECTION and compile and run (make tester && ./tester).\n\n\n\n\n\n\nBefore you go the next step!\n\n\n\nWhen your definition passes the test, continue; otherwise fix and retest your constructor."
  },
  {
    "objectID": "weekly-activities/labs/lab-04/lab04.html#step-4.-the-explicit-value-constructor",
    "href": "weekly-activities/labs/lab-04/lab04.html#step-4.-the-explicit-value-constructor",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 4. The Explicit-Value Constructor",
    "text": "Step 4. The Explicit-Value Constructor\nThe explicit-value constructor’s role is to initialize an object using values provided by the user. In a data structure, the user often wants to specify a non-zero starting size for the structure. (e.g., Vec v(5); should construct v as a vector capable of storing 5 items.) To store the value the user specifies, our constructor will need a parameter, so we might start by writing this stub for the constructor:\nVec::Vec(unsigned size) {\n}\nPut the above code in your .cpp file, and add a prototype for this constructor to the Vec class in Vec.h. Then in tests.cpp, uncomment the first 2 lines of code in the “explicit-value” SECTION that tests this constructor. Save/compile/run the tests. The test should fail. To make it pass, add code to your explicit-value constructor. Here is the algorithm to follow:\n\nSet mySize to size\nIf size is positive (greater than zero):\n\nDynamically allocate an array of size values of type Item, and store the address of the array in myArray; and\nSet each of the Items in that array to zero.\n\nOtherwise:\n\nSet myArray to nullptr.\n\n\nContinue when your class passes all tests."
  },
  {
    "objectID": "weekly-activities/labs/lab-04/lab04.html#step-5.-getting-the-value-of-an-item",
    "href": "weekly-activities/labs/lab-04/lab04.html#step-5.-getting-the-value-of-an-item",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 5. Getting the Value of an Item",
    "text": "Step 5. Getting the Value of an Item\nThe rest of the test for the “explicit-value constructor” looks to see if myArray was initialized correctly. In order to do this, we need to be able to retrieve the value in each location in myArray. To do that, we’ll implement a getItem() method that lets us retrieve the value of an item at a given index (e.g., Item it = v.getItem(i);). Since this method (i) needs the index of the value it is to retrieve, and (ii) does not change its receiver’s instance variables, we will start by defining this stub:\nItem Vec::getItem(unsigned index) const {\n}\nPlace a prototype for this method in the Vec class, and in tests.cpp, uncomment the rest of the test code in the “explicit-value” constructor SECTION. For the sake of time, here is the code for .cpp file:\nItem Vec::getItem(unsigned index) const {\n    if (index &lt; 0 || index &gt;= mySize) {\n        throw range_error(\"Bad index\");\n    }\n    return myArray[index];\n}\nWhen all tests pass, continue.\n\n\n\n\n\n\nNote\n\n\n\nThere is a TEST_CASE in tests.cpp to fully test getItem(), but it relies on setItem(), which we have not implemented yet. So, don’t uncomment that test case yet."
  },
  {
    "objectID": "weekly-activities/labs/lab-04/lab04.html#step-6.-setting-the-value-of-an-item",
    "href": "weekly-activities/labs/lab-04/lab04.html#step-6.-setting-the-value-of-an-item",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 6. Setting the Value of an Item",
    "text": "Step 6. Setting the Value of an Item\nOur next operation is to set the value of a particular item in a Vec (e.g., v.setItem(i, val);). Since the method needs both the index of the item to change, and the new value for the item, we will start with this stub:\nvoid Vec::setItem(unsigned index, const Item& it) {\n}\nPlace a prototype for this method in the Vec class, and in tests.cpp, uncomment the code to test “setItem”.\nTry to build and run the test to see what errors you get; then complete the stub so that it passes the test. Again, for the sake of time, here is the code for Vec.cpp\nvoid Vec::setItem(unsigned index, const Item& it) {\n    if (index &lt; 0 || index &gt;= mySize) {\n      throw range_error(\"Bad index\");\n    }\n    myArray[index] = it;\n}\nWhen all tests pass for testing setItem, also uncomment the getItem TEST_CASE. If you have everything working, you should be passing 29 assertions in 9 test cases."
  },
  {
    "objectID": "weekly-activities/labs/lab-04/lab04.html#step-7.-the-copy-constructor",
    "href": "weekly-activities/labs/lab-04/lab04.html#step-7.-the-copy-constructor",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 7. The Copy Constructor",
    "text": "Step 7. The Copy Constructor\nThe compiler invokes a special copy constructor any time it needs a copy of an object, for example:\n\nWhen a function returns an object; OR\nWhen an object is passed as an argument to a call-by-value parameter.\n\nThe C++ compiler supplies a default copy constructor, but it merely does a bit-by-bit copy of the instance variables of the object being copied. This bit-copy is inadequate for classes with pointer instance variables, because it just copies the address within such variables, rather than making a distinct copy of the dynamically allocated memory to which that address points. Because of this, every class that contains a pointer instance variable should define its own copy constructor that makes a distinct copy of the object, including its dynamically allocated memory.\nThe stub for a Vec copy constructor looks like this:\nVec::Vec(const Vec& original) {\n}\n\n\n\n\n\n\nImportant\n\n\n\nIf we were to mistakenly make the copy constructor’s parameter a call-by-value parameter instead of a call-by-const-reference parameter, an infinite recursion will occur when the copy constructor is invoked. The reason is that passing a Vec to a call-by-value parameter will invoke the copy constructor, which will take the thing to be copied as a parameter, which will invoke the copy constructor, which will take the thing to be copied as a parameter, which will invoke the copy constructor, which… To avoid this, the parameter of a copy constructor should always be a const-reference parameter, as shown above.\n\n\nAdd the code above to the .cpp file. Then, add a prototype to the Vec class, and in tests.cpp uncomment the code in the “copy” constructor SECTION to test it. Then add statements to your stub to construct a Vec that is a distinct copy of original, and check to see if the tests pass. Here is the algorithm to follow:\n\nSet mySize to the size of original\nIf original.mySize is greater than zero:\n\nDynamically allocate an array of mySize values of type Item, and store the address of the array in myArray.\nSet each itemi in the new array to itemi from original.\n\nOtherwise, set myArray to nullptr.\n\nContinue when your constructor passes all tests. (I am now seeing 35 assertions in 9 test cases passing.)"
  },
  {
    "objectID": "weekly-activities/labs/lab-04/lab04.html#step-8.-the-destructor",
    "href": "weekly-activities/labs/lab-04/lab04.html#step-8.-the-destructor",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 8. The Destructor",
    "text": "Step 8. The Destructor\nThe C++ compiler invokes an object’s destructor when the object ceases to exist. The role of the destructor is thus to perform any “clean up” actions that are needed to return the system to the same state it was in before the object existed. In a data structure that uses dynamic memory allocation, the main task is usually to return dynamically allocated memory to the system using the delete operation.\nA destructor cannot have any parameters, and its name is the name of the class preceded by the tilde character (~), so we can begin with the stub:\nVec::~Vec() {\n}\nSkeleton code is already in the .h and .cpp files. Uncomment the code to test the destructor in tests.cpp. Then add the statements to the destructor to reclaim the dynamic array whose address is in myArray, set myArray to nullptr, and set mySize to zero. Compile and see if your statements pass the test. Here is the algorithm to follow:\n\nUse delete [] to deallocate the array whose address is stored in myArray delete [] myArray;\nSet myArray to nullptr\nSet mySize to zero.\n\nTechnically, only the first step is strictly necessary. The reason is that the destructor is only invoked at the end of an object’s lifetime. Since the object will no longer exist, resetting its instance variables is not necessary (except to pass the test).\nContinue when your destructor passes all tests."
  },
  {
    "objectID": "weekly-activities/labs/lab-04/lab04.html#step-9.-setting-a-vecs-size",
    "href": "weekly-activities/labs/lab-04/lab04.html#step-9.-setting-a-vecs-size",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 9. Setting a Vec’s Size",
    "text": "Step 9. Setting a Vec’s Size\nOur next operation is to set a Vec’s size via a method (e.g., v.setSize(8);). The role of this method is to allow us to change the size of an existing Vec to some new size. Since the user must specify this new size, we need a parameter to store it. We might start by defining this stub:\nvoid Vec::setSize(unsigned newSize) {\n}\nPlace a prototype for this method in the Vec class, and in tests.cpp, uncomment all the code in the TEST_CASE to test “setSize”. Then complete the stub so that it passes the test. Think carefully! This one is deceptively tricky to get right! Algorithm:\n\nIf mySize and newSize are different:\n\nIf newSize is zero:\n\nDeallocate myArray\nSet myArray to nullptr\nSet mySize to zero.\n\nOtherwise:\n\nDeclare a local variable newArray of type Item *\nAllocate a new dynamic array of newSize Items, storing its address in newArray.\nIf mySize is less than newSize:\n\nCopy mySize values from myArray into newArray.\nSet the remaining (newSize - mySize) values to zero.\n\nOtherwise, just copy newSize values from myArray into newArray.\nSet mySize to newSize.\nDeallocate myArray.\nSet myArray to newArray.\n\n\n\nWhen your method passes all tests, continue."
  },
  {
    "objectID": "weekly-activities/labs/lab-04/lab04.html#step-10.-equality",
    "href": "weekly-activities/labs/lab-04/lab04.html#step-10.-equality",
    "title": "Lab 4: Vec – A First Dynamic Data Structure",
    "section": "Step 10. Equality",
    "text": "Step 10. Equality\nThe purpose of the equality operation is to let us compare two objects (e.g., if (v1 == v2) { ... }), returning true if they are equal, and returning false if they are not. Since the equality operation returns a bool value, a call:\nv1 == v2\nwill be treated by the compiler as:\nv1.operator==(v2)\nThis equality operator should not change either of its operands. We start by defining this stub:\nbool Vec::operator==(const Vec& v2) const {\n}\nPlace a prototype for this method in the Vec class, and in tests.cpp, uncomment the code to test “equality”. Then add statements to the stub so that it passes the test. Algorithm:\n\nCheck to see if mySize is NOT the same as the size of v2. If the two vectors are not the same size, return false.\nCompare each itemi in myArray to each itemi from v2’s array:\nIf any are not equal, return false.\nThe two arrays are equal in size, and all their values are the same, so return true.\n\nContinue when your method passes all tests."
  }
]